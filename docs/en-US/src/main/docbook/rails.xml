<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="rails">
  <title>Ruby on Rails</title>

  <section id="rails-support">
    <title><productname>Ruby on Rails</productname> Applications</title>

    <para>Ruby-on-Rails (also referred to as "RoR" or "Rails") is one of the
    most popular Model-View-Controller (MVC) frameworks for the Ruby language.
    It was originally created by David Heinemeier Hansson at <ulink
    url="http://37signals.com/">37signals</ulink> during the course of
    building many actual Ruby applications for their consulting
    business.</para>

    <para>Rails has straight-forward components representing models, views,
    and controllers. The framework as a whole values convention over
    configuration. It has been described as "opinionated software" in that
    many decisions have been taken away from the end-user.</para>

    <para>It is exactly the opinionated nature of Rails that allows it to be
    considered a simple and agile framework for quickly building web-based
    applications. Additionally, since Ruby is an interpreted language instead
    of compiled, the assets of an application can be edited quickly, with the
    results being immediately available. In most cases, the application does
    not need to be restarted to see changes in models, views or controllers
    reflected.</para>

    <para>To deploy your application, please see <xref linkend="deployment" />
    and <xref linkend="deployment-descriptors" />.</para>
  </section>

  <section>
    <title>Rails 2.3.x versus 3.x</title>

    <para>TorqueBox supports both the 2.3.x and 3.x codelines of Rails. By
    default, all utilities prefer the latest version of a given gem, which in
    the current case is ${version.rails3}.</para>

    <para>To specify a specific version of utilities such as the rails command
    used to create applications, simply specify the version number between
    underscores immediately following the command name.</para>

    <informalexample>
      <para><screen>$ rails _${version.rails2}_ myapp</screen></para>
    </informalexample>
  </section>

  <section id="preparing-your-rails-application">
    <title>Preparing your Rails application</title>

    <para>While TorqueBox is 100% compatible with Ruby-on-Rails, there are a
    few steps that must be taken to ensure success. The biggest issues to
    contend with involve database access and native gems. The distribution
    includes a Rails application template to make the creation or adaptation
    of a codebase to TorqueBox easier.</para>

    <section>
      <title>Install Rails</title>

      <para>Previous releases of TorqueBox bundled Rails but it is no
      longer included. You'll need to install the version needed by
      your application.</para>

      <para><screen><prompt>$</prompt> <command>gem</command> <parameter>install rails</parameter></screen></para>
    </section>

    <section>
      <title>Using the application template</title>

      <para>You can use the included application template to setup a new Rails
      application or modify an existing one to work with TorqueBox.</para>

      <section>
        <title>Creating a new Rails application</title>

        <para>To create a new Rails application using the template, simply use
        the <parameter>-m</parameter> parameter when you execute the
        <command>rails</command> command.</para>

        <formalpara>
          <title>Rails 2.3.x</title>

          <para><screen><prompt>$</prompt> <command>rails</command> <parameter>_${version.rails2}_ myapp -m <envar>$TORQUEBOX_HOME</envar>/share/rails/template.rb</parameter></screen></para>
        </formalpara>

        <formalpara>
          <title>Rails 3.x</title>

          <para><screen><prompt>$</prompt> <command>rails</command> new <parameter>myapp -m <envar>$TORQUEBOX_HOME</envar>/share/rails/template.rb</parameter></screen></para>
        </formalpara>
      </section>

      <section>
        <title>Applying template to an existing application</title>

        <para>To apply the template to an existing application, simply use the
        <command>rails:template</command> rake task.</para>

        <para><screen><prompt>$</prompt> <command>rake</command> <parameter>rails:template</parameter> <varname>LOCATION</varname>=<envar>$TORQUEBOX_HOME</envar>/share/rails/template.rb</screen></para>
      </section>
    </section>

    <section>
      <title>Manually configuring an application</title>

      <section>
        <title>Include the JDBC Gems for Database Connectivity</title>

        <para>ActiveRecord applications deployed on TorqueBox benefit from
        using the Java-based JDBC database drivers. These drivers are provided
        as a handful of gems which you may include into your application
        through <filename>config/environment.rb</filename> or a
        <filename>Gemfile</filename>. For more information on database
        connectivity wihtin the TorqueBox environment, please see <xref
        linkend="database" />. Database gems supporting MySQL, PostgreSQL, and
        SQLite3 are supplied in the TorqueBox binary distribution.</para>

        <formalpara>
          <title>Rails 2.x</title>

          <para>You simply must reference the
          <filename>activerecord-jdbc-adapter</filename> from your
          <filename>environment.rb</filename> within the
          <code>Rails::Initializer.run</code> block.</para>
        </formalpara>

        <para><programlisting language="ruby">Rails::Initializer.run do |config|

<emphasis>  config.gem "activerecord-jdbc-adapter",
             :require=&gt;'jdbc_adapter'
</emphasis>
end</programlisting></para>

        <para>All databases will require inclusion of the
        <filename>activerecord-jdbc-adapter</filename>. No other gems need to
        be required or loaded, since ActiveRecord will perform further
        discovery on its own.</para>

        <formalpara>
          <title>Rails 3.x</title>

          <para>Rails 3 uses bundler to manage the dependencies of your
          application. To specify the requirement of the
          <filename>activerecord-jdbc-adapter</filename> with Rails 3, simple
          add it to your <filename>Gemfile</filename>. Additionally, any
          specific JDBC driver your application will require should be
          indicated.</para>
        </formalpara>

        <para><informalexample>
            <para><programlisting>gem 'activerecord-jdbc-adapter'
gem 'jdbc-sqlite3'</programlisting></para>
          </informalexample></para>
      </section>

      <section>
        <title>Configure Sessions</title>

        <para>By default, both Rails 2 and Rails 3 use the simple cookie-based
        session store, which requires no support from the server. TorqueBox
        can leverage the cluster-compatible sessions provided by the
        application server to keep session state on the server. The TorqueBox
        session store requires no specific configuration of a database or
        other technology. To use the TorqueBox session store, you must adjust
        <filename>config/initializers/session_store.rb</filename>. The
        contents vary depending on the version of Rails your application
        uses.</para>

        <para>When using the TorqueBox Rails application template, described
        above, these modifications are made for you.</para>

        <formalpara>
          <title>Rails 2</title>

          <para>To use the application-server's session storage mechanism,
          your application's config/initializers/session_store.rb should
          contain only the following:</para>
        </formalpara>

        <screen>( ActionController::Base.session_store = TorqueBox::Session::ServletStore ) if defined?(TorqueBox::Session::ServletStore)</screen>

        <formalpara>
          <title>Rails 3</title>

          <para>To use the application-server's session storage mechanism,
          your application's config/initializers/session_store.rb should
          contain a variation of the following, adjusted for your
          application's name:</para>
        </formalpara>

        <screen><replaceable>MyApp</replaceable>::Application.config.session_store TorqueBox::Session::ServletStore if defined?(TorqueBox::Session::ServletStore)</screen>
      </section>
    </section>

    <section>
      <title>Eliminate or replace "native" Gems</title>

      <para>"Native" gems that rely upon machine-specific compiled code do not
      function with JRuby and TorqueBox. You must replaced these gems with
      pure-Ruby or pure-Java implementations. Some native gems using FFI are
      usable within TorqueBox.</para>
    </section>
  </section>

  <section>
    <title>Using Application-Server Sessions</title>

    <para>By using the TorqueBox application-server-based session store, your
    application gets the benefits of clusterable sessions without having to
    setup and maintain a database.</para>

    <para>Additionally, by using the TorqueBox session store, your application
    can communicate between both the Java and Ruby sides through the HTTP
    session. Where possible, elemental scalar attribtues of the Ruby session
    are synchronized to similar attribtues in the Java session, and
    vice-versa.</para>

    <para>For complex objects, they are retained in a Ruby hash, and
    serialized as a blob into a single attribute of the Java session.</para>

    <para>When copying between the Ruby and Java sessions, attribtues will be
    retained under symbol keys in the ruby session, and string keys in the
    Java session.</para>

    <para>The supported scalar types are <type>numerics</type>,
    <type>strings</type>, <type>booleans</type> and <type>nil</type>.</para>
  </section>

  <section id="caching">
    <title>Caching with <code>TorqueBoxStore</code></title>

    <para>
      TorqueBox provides an implementation of the <ulink
      url="http://guides.rubyonrails.org/caching_with_rails.html">Rails
      3.x <code>ActiveSupport::Cache::Store</code></ulink> that
      exposes your application to the sexy <ulink
      url="http://torquebox.org">Infinispan</ulink> data grid.
    </para>

    <para>
      Backed by Infinispan,
      <code>ActiveSupport::Cache::TorqueBoxStore</code> supports all
      the options of the existing Rails implementations, including the
      advanced features of <code>MemCacheStore</code>, along with a
      couple more to control how data replication occurs amongst the
      nodes in a cluster.
    </para>

    <para>
      Although it does depend on the <code>ActiveSupport</code> Rails
      3 gem, it may be used in any Rack-based application or any
      TorqueBox service, task or job that requires sophisticated
      caching.
    </para>

    <section>
      <title>Clustering Modes</title>

      <para>
        Infinispan offers a number of clustering modes that determine
        what happens when an entry is written to the cache.
      </para>

      <formalpara>
        <title>Local</title>
        <para>
          This is the default mode when TorqueBox runs non-clustered,
          roughly equivalent to the Rails <code>MemoryStore</code>
          implementation, though it has some advantages over a simple
          memory store, e.g. write-through/write-behind persistence,
          JTA/XA support, MVCC-based concurency, and JMX
          manageability.
        </para>
      </formalpara>

      <formalpara>
        <title>Invalidation</title>
        <para>
          This is the default mode when TorqueBox runs clustered,
          i.e. <code>JBOSS_CONF=all</code>.  No data is actually
          shared among the nodes in this mode.  Instead, notifications
          are sent to all nodes when data changes, causing them to
          evict their stale copies of the updated entry.  This mode
          works very well for Rails' fragment and action caching.
        </para>
      </formalpara>

      <formalpara>
        <title>Replicated</title>
        <para>
          In this mode, entries added to any cache instance will be
          copied to all other cache instances in the cluster, and can
          then be retrieved locally from any instance.  This mode is
          probably impractical for clusters of any significant size.
          Infinispan recommends 10 as a reasonable upper bound on the
          number of replicated nodes.
        </para>
      </formalpara>

      <formalpara>
        <title>Distributed</title>
        <para>
          This mode enables Infinispan clusters to achieve "linear
          scalability". Cache entries are copied to a fixed number of
          cluster nodes (2, by default) regardless of the cluster
          size.  Distribution uses a consistent hashing algorithm to
          determine which nodes will store a given entry.
        </para>
      </formalpara>

    </section>

    <section>
      <title>Configuration</title>
      <para>
        You configure the TorqueBox cache store the same way you would
        any other Rails cache store, but we recommend setting it in
        <filename>config/application.rb</filename> because it will
        adapt to whichever environment it finds itself.  Regardless of
        its configuration, it will <emphasis>always</emphasis>
        fallback to local mode when run in a non-clustered, even
        non-TorqueBox, environment.
      </para>

      <para><programlisting language="ruby">module YourApp
  class Application &lt; Rails::Application
<emphasis>
    config.cache_store = :torque_box_store
</emphasis>
  end
end</programlisting>
      </para>

      <para>
        Optionally, you could refer to the fully-qualified class name.
        Either style is acceptable.
      </para>

      <para>
        <programlisting language="ruby">
          config.cache_store = ActiveSupport::Cache::TorqueBoxStore.new
        </programlisting>
      </para>

      <para>
        By default, the <code>TorqueBoxStore</code> will be in
        <emphasis>asynchronous invalidation</emphasis> mode when
        clustered (<code>JBOSS_CONF=all</code>), and
        <emphasis>local</emphasis> mode when not.  But you can
        certainly override the defaults:
      </para>

      <para>
        <programlisting language="ruby">
          config.cache_store = :torque_box_store, {:mode => :distributed, :sync => true}
        </programlisting>
      </para>

      <para>
        You can even create multiple cache stores in your app, each
        potentially in a different clustering mode.  You should use
        the <code>:name</code> option to identify any additional
        caches you create, e.g.
      </para>

      <para>
        <programlisting language="ruby">
    COUNTERS = ActiveSupport::Cache::TorqueBoxStore.new(:name => 'counters', 
                                                        :mode => :replicated, 
                                                        :sync => true)
        </programlisting>
      </para>

    </section>

    <section id="caching-options">
      <title><code>TorqueBoxStore</code> options</title>
      <para>The TorqueBox cache store supports the following options:</para>

      <table>
        <title>Cache store options</title>
        
        <tgroup cols="3">
          <colspec align="left" />
          
          <thead>
            <row>
              <entry>Option</entry>
              
              <entry>Default</entry>
              
              <entry>Description</entry>
            </row>
          </thead>
          
          <tbody>
            <row>
              <entry><parameter>:mode</parameter></entry>
              
              <entry><parameter>:invalidation</parameter></entry>
              
              <entry>
                Any of the following will result in <emphasis>replicated</emphasis> mode:
                <itemizedlist>
                  <listitem><para><parameter>:r</parameter></para></listitem>
                  <listitem><para><parameter>:repl</parameter></para></listitem>
                  <listitem><para><parameter>:replicated</parameter></para></listitem>
                  <listitem><para><parameter>:replication</parameter></para></listitem>
                </itemizedlist>
                Any of the following will result in <emphasis>distributed</emphasis> mode:
                <itemizedlist>
                  <listitem><para><parameter>:d</parameter></para></listitem>
                  <listitem><para><parameter>:dist</parameter></para></listitem>
                  <listitem><para><parameter>:distributed</parameter></para></listitem>
                  <listitem><para><parameter>:distribution</parameter></para></listitem>
                </itemizedlist>
                Any other value for <parameter>:mode</parameter> will
                result in <emphasis>invalidation</emphasis> when
                clustered and <emphasis>local</emphasis> otherwise.
              </entry>
            </row>
            
            <row>
              <entry><parameter>:sync</parameter></entry>
              
              <entry>false</entry>
              
              <entry>
                The coordination between nodes in a cluster can happen
                either synchronously (slower writes) or asynchronously
                (faster writes).
              </entry>
            </row>
            
            <row>
              <entry><parameter>:name</parameter></entry>
              
              <entry>{the application's name}</entry>
              
              <entry>
                The <parameter>:name</parameter> option enables you to
                create multiple cache stores in your app, each with
                different options.  It's also a way you can configure
                multiple apps to share the same cache store.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

  </section>

</chapter>
